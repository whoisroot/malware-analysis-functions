# Variables
export XMLLINT_INDENT="    "
export color="1;4;36"
export CSS_file="$HOME/.relatorios.css"

function dwg_macro(){
	for arquivo in $(find . -iname "*.dwg"); do
		if [[ -n $(xxd -p "${arquivo}" | tr -d "\n" | grep -i d0cf11e0) ]]; then
			echo "O arquivo ${arquivo} contém um OLE embutido" # This file contains an OLE container embedded
		fi
	done
}

function OLEpuke(){
	IFS_bkp=$IFS
	IFS=$'\n'
	for ole in $(find . -type f -exec file "{}" \; | egrep "Composite Document File V2 Document|Microsoft (Word|Excel|PowerPoint)" | cut -d: -f1); do
		if [[ $DEBUG ]]; then
			echo "${ole}" >&2
		fi
		if [[ $1 == "--short" ]]; then
			if [[ $(oleid "${ole}" | cut -d"|" -f3 | egrep "HIGH|Medium") ]]; then
				oleid "${ole}";
			fi
		else
			echo -e "\n\n\e[${color}m$ole\e[0m\n";
			oleid "${ole}";
		fi
	done
	IFS=$IFS_bkp
}

function XMLpuke(){
	IFS_bkp=$IFS
	IFS=$'\n'
	for xml in $(find . -type f -exec file \{\} \; | grep -i xml | cut -d: -f1); do
		if [[ $DEBUG ]]; then
			echo "${xml}" >&2
		fi
		echo -e "\n\n\e[${color}m$xml\e[0m\n";
		XMLpretty "${xml}";
	done
	IFS=$IFS_bkp
}

function XMLpretty(){
	xmllint --format $@
}

function hashes(){
	if [[ $DEBUG ]]; then
		echo -e "Color: ${color}\nFile: ${1}" >&2
	fi
	if [[ -f "${1}" ]]; then
		echo -en "\e[${color}mMD5:\e[0m\t\t"; md5sum "$1" | cut -d" " -f1;
		echo -en "\e[${color}mSHA-1:\e[0m\t\t"; sha1sum "$1" | cut -d" " -f1;
		echo -en "\e[${color}mSHA-256:\e[0m\t"; sha256sum "$1" | cut -d" " -f1;
	else
		echo "Você deve passar pelo menos um arquivo"; # You should supply at least one file
		return -1
	fi;
}

function multiple_hashes2report(){
	if [[ -z $@ ]]; then
		echo "Você deve passar pelo menos um arquivo"; # You should supply at least one file
		return -1
	fi
	color_bkp="${color}"
	color=""
	for file in "$@"; do
		file_escaped="$(printf "${file}" | sed 's/_/\\_/g')"
		if [[ $DEBUG ]]; then
			echo -e "\nFile: ${file}\nFile escaped: ${file_escaped}" >&2
		fi
		if [[ -f "${1}" ]]; then
			echo -e "\n_${file_escaped}_"
			DEBUG="" hashes "${file}" | sed 's/^/\n\> /g' | sed 's/\x1b\[/**/g' | sed 's/0m\t\+/ \`/g' | sed 's/$/\`/g' | sed 's/^`$//g' | tr -d m
		fi
	done
	color="${color_bkp}"
	unset color_bkp
}

function meta(){
	if [[ -z $@ ]]; then
		echo "Você deve passar pelo menos um arquivo"; # You should supply at least one file
		return -1
	fi
	if [[ $DEBUG ]]; then
		echo -e "Files: $@\ncolor: ${color}" >&2
	fi
	for file in "$@"; do
		if [[ -f "$file" ]]; then
			python3 -c "print('\n'+'/\u203e\\_'*20+'/\n')" | lolcat
			echo -e "\e[${color}mFile:\e[0m\t\t${file}";
			echo -en "\e[${color}mSize:\e[0m\t\t"; du -sh "${file}" | cut -f1;
			echo -en "\e[${color}mFile type:\e[0m\t\x08"; file "${file}" | cut -d":" -f2-;
			DEBUG="" hashes "$file";
		fi
	done
	python3 -c "print('\n'+'/\u203e\\_'*20+'/\n')" | lolcat
}

function md2html(){
	pandoc -f gfm -t html5 -s --metadata title="Incidente $1" --self-contained -c "$CSS_file" -o "$1.html" "$1.md"
	sed -i 's/<a href=".*">//g' "$1.html" # Remove anchor links
	sed -i 's/<\/a>//g' "$1.html" # Remove anchor tags
}

function b64d(){
	if [[ -n $1 ]]; then
		if [[ -f "$1" ]]; then
			base64 -d "$1" && echo
		else
			printf "$1" | base64 -d && echo
		fi
	else
		base64 -d && echo
	fi
}

function b64(){
	if [[ -n $1 ]]; then
		if [[ -f "$1" ]]; then
			base64 "$1" && echo
		else
			printf "$1" | base64 && echo;
		fi
	else
		base64 && echo;
	fi
}

function url_encode(){
	if [[ -z $1 ]]; then
		python3 -c "import urllib.parse;print(urllib.parse.quote(input()))"
	else
		printf "${1}" | python3 -c "import urllib.parse;print(urllib.parse.quote(input()))"
	fi
}

function url_decode(){
	if [[ -z $1 ]]; then
		python3 -c "import urllib.parse;print(urllib.parse.unquote(input()))"
	else
		printf "${1}" | python3 -c "import urllib.parse;print(urllib.parse.unquote(input()))"
	fi
}

function noNULLstrings(){
	cat "$1" | tr -d '\0' | strings
}

function urlSearch(){
	egrep -ao "(\w+\.)+[[:alpha:]]{2,5}(/|[[:space:]]|\")" "$1" | sort -u
}

function xxdNULL(){
	xxd -c 66 "$1" | cut -d: -f2- | egrep "00 ?00"
}

function ipinfo(){
	if [[ $DEBUG ]]; then
		echo -e "IPINFO_AUTH: ${IPINFO_AUTH}\nIP: ${1}\nJSON fields: ${2}" >&2
	fi
	curl -s -u ${IPINFO_AUTH}: "https://ipinfo.io/${1}" | jq "${2}"
}

alias myip="ipinfo '' .ip | tr -d '\"'"

function limpa_safelinks(){
	python -c "print('-='*20+'-')"
	echo "$1" | cut -d= -f2 | cut -d\& -f1 | url_decode
	python -c "print('-='*20+'-')"
}

function get_redirects(){
	curl --head -s -L "$1" | grep -i location
}

function parse_lnks (){
	IFS_bkp=$IFS
	IFS=$'\n'
	for lnk in $@; do
		echo -e "\n$lnk\n-"
		lnkparse "${lnk}" | egrep "Command line|Primary name|Relative path|Timestamp";
	done
	IFS=$IFS_bkp
}

alias LNKs="parse_lnks *.lnk"

function VT_query() {
	for file in "$@"; do
		python -c "print('\n'+'-='*20+'-\n\n${file}\n')"
		hash=$(sha256sum "${file}" | cut -d" " -f1);
		curl -s --header "x-apikey: $VT_API_KEY"  https://www.virustotal.com/api/v3/files/${hash} | jq 'if (.error) then .error.code else { last_analysis_stats: .data.attributes.last_analysis_stats,popular_threat_category: .data.attributes.popular_threat_classification.popular_threat_category,popular_threat_name: .data.attributes.popular_threat_classification.popular_threat_name, last_analysis_date: .data.attributes.last_analysis_date | strftime("%B %d %Y %I:%M%p %Z") } end';
	done
}

# https://github.com/sevsec/vt-scan
alias VT_scan_file="vt-scan -k "$VT_API_KEY" -f"
alias VT_scan_url="vt-scan -k "$VT_API_KEY" -u"
alias VT_scan_domain="vt-scan -k "$VT_API_KEY" -d"
alias VT_scan_ip="vt-scan -k "$VT_API_KEY" -i"

function VT_wait_analysis (){
	echo "Aguardando resultados da análise:" # Waiting the analysis results
	output="$(vt-scan -k "$VT_API_KEY" -a "$1")"
	while [[ "\"completed\"" != $(echo "$output" | jq '.data.attributes.status') ]]; do
		printf "."
		sleep 30
		output="$(vt-scan -k "$VT_API_KEY" -a "$1")"
	done
	echo ""
	curl -s --header "x-apikey: $VT_API_KEY" "$(echo "$output" | jq '.data.links.item' | tr -d '"')" | jq '{ last_analysis_stats: .data.attributes.last_analysis_stats,popular_threat_category: .data.attributes.popular_threat_classification.popular_threat_category,popular_threat_name: .data.attributes.popular_threat_classification.popular_threat_name, last_analysis_date: .data.attributes.last_analysis_date | strftime("%B %d %Y %I:%M%p %Z") }'
}
