# Variables
export XMLLINT_INDENT="    "
export color="1;4;36"
export CSS_file="$HOME/.relatorios.css"

function dwg_macro(){
	for arquivo in $(ls *.dwg); do
		if [[ -n $(xxd -p "${arquivo}" | tr -d "\n" | grep -i d0cf11e0) ]]; then
			echo "O arquivo ${arquivo} contém um OLE embutido"
		fi
	done
}
function  XMLpuke(){
	for xml in $(find . -type f -exec file \{\} \; | grep -i xml | cut -d: -f1); do
		if [[ $DEBUG ]]; then
			echo "${xml}" >&2
		fi
		echo -e "\n\n\033[32m$xml\033[0m\n";
		XMLpretty $xml;
	done
}
function XMLpretty(){
	xmllint --format $@
}

function hashes(){
	if [[ $DEBUG ]]; then
		echo -e "Color: ${color}\nFile: ${1}" >&2
	fi
	if [[ -f "${1}" ]]; then
		echo -en "\e[${color}mMD5:\e[0m\t\t"; md5sum "$1" | cut -d" " -f1;
		echo -en "\e[${color}mSHA-1:\e[0m\t\t"; sha1sum "$1" | cut -d" " -f1;
		echo -en "\e[${color}mSHA-256:\e[0m\t"; sha256sum "$1" | cut -d" " -f1;
	else
		echo "Você deve passar pelo menos um arquivo"; # You should supply at list one file
	fi;
}

function multiple_hashes2report(){
	if [[ -z $@ ]]; then
		echo "Você deve passar pelo menos um arquivo"; # You should supply at list one file
		return 0
	fi
	color_bkp="${color}"
	color=""
	for file in "$@"; do
		file_escaped="$(printf "${file}" | sed 's/_/\\_/g')"
		if [[ $DEBUG ]]; then
			echo -e "File: ${file}\nFile escaped: ${file_escaped}" >&2
		fi
		echo -e "\n_${file_escaped}_"
		hashes "${file}" | sed 's/^/\n\> /g' | sed 's/\x1b\[/**/g' | sed 's/0m\t\+/ \`/g' | sed 's/$/\`/g' | sed 's/^`$//g' | tr -d m
	done
	color="${color_bkp}"
	unset color_bkp
}

function meta(){
	if [[ -z $@ ]]; then
		echo "Você deve passar pelo menos um arquivo"; # You should supply at list one file
		return 0
	fi
	if [[ $DEBUG ]]; then
		echo "$@" >&2
	fi
	for file in "$@"; do
		if [[ -f "$file" ]]; then
			python3 -c "print('\n'+'/\u203e\\_'*20+'/\n')" | lolcat
			echo -e "\e[${color}mFile:\e[0m\t\t${file}";
			echo -en "\e[${color}mSize:\e[0m\t\t"; du -sh "${file}" | cut -f1;
			echo -en "\e[${color}mFile type:\e[0m\t\x08"; file "${file}" | cut -d":" -f2-;
			hashes "$file";
		fi
	done
	python3 -c "print('\n'+'/\u203e\\_'*20+'/\n')" | lolcat
}

function md2html(){
	pandoc -f gfm -t html5 -s --metadata title="Incidente $1" --self-contained -c "$CSS_file" -o "$1.html" "$1.md"
	sed -i 's/<a href=".*">//g' "$1.html" # Remove anchor links
	sed -i 's/<\/a>//g' "$1.html" # Remove anchor tags
}

function b64d(){
	if [[ -n $1 ]]; then
		if [[ -f "$1" ]]; then
			base64 -d "$1" && echo
		else
			printf "$1" | base64 -d && echo
		fi
	else
		base64 -d && echo
	fi
}

function b64(){
	if [[ -n $1 ]]; then
		if [[ -f "$1" ]]; then
			base64 "$1" && echo
		else
			printf "$1" | base64 && echo;
		fi
	else
		base64 && echo;
	fi
}

function url_encode(){
	if [[ -z $1 ]]; then
		python -c "import urllib.parse;print(urllib.parse.quote(input()))"
	else
		printf "${1}" | python -c "import urllib.parse;print(urllib.parse.quote(input()))"
	fi
}

function url_decode(){
	if [[ -z $1 ]]; then
		python -c "import urllib.parse;print(urllib.parse.unquote(input()))"
	else
		printf "${1}" | python -c "import urllib.parse;print(urllib.parse.unquote(input()))"
	fi
}

function noNULLstrings(){
	cat "$1" | tr -d '\0' | strings
}

function urlSearch(){
	grep -ao "\(\w\+\.\)\+[[:alpha:]]\{2,5\}\(/\|[[:space:]]\|\"\)" "$1" | sort -u
}

function xxdNULL(){
	xxd -c 66 "$1" | cut -d: -f2- | grep "00 \?00"
}

function ipinfo(){
	if [[ $DEBUG ]]; then
		echo -e "IPINFO_AUTH: ${IPINFO_AUTH}\nIP: ${1}\nJSON fields: ${2}" >&2
	fi
	curl -s -u ${IPINFO_AUTH}: "https://ipinfo.io/$1" | jq $2
}

alias myip="ipinfo '' .ip | tr -d '\"'"
